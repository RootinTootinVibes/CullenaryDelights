@model Recipe

@{
    ViewData["Title"] = "Create Recipe";
}
<h1>Submit a Recipe</h1>
<form action="/Recipe/Create" method="post">
    @Html.AntiForgeryToken()
        <div class="container">
            <p>
                <label for="Name"><b>Recipe Name</b></label>
                <input type="text" placeholder="Name" name="Name" required>
            </p>
            <p>
                <label for="PrepTimeMinutes"><b>Prep Time</b></label>
                <input type="number" placeholder="Prep Time (Minutes)" name="PrepTimeMinutes" required>
            </p>
            <p>
                <label for="CookTimeMinutes"><b>Cook Time</b></label>
                <input type="number" placeholder="Cook Time (Minutes)" name="CookTimeMinutes" required>
            </p>

            <hr />

            <h3>Steps</h3>
            <div id="steps-container">
                <!-- JS will add step inputs here  -->
            </div>
            <button type="button" id="add-step-btn">+ Add Step</button>

            <hr />

            <h3>Ingredients</h3>
            <div id="ingredients-container">
                <!--JS will add ingredient inputs here -->
            </div>
            <button type="button" id="add-ingredient-btn">+ Add Ingredient</button>

            <button type="submit">Save Recipe</button>
            <a asp-action="MyRecipes">Cancel</a>
        </div>
    </form>

    @section Scripts {    
        <script type="text/javascript">
            console.log("script running");
            // Keep counters so fields are named Steps[0], Steps[1], etc.
            let stepIndex = 0;
            let ingredientIndex = 0;

            if (document.getElementById('add-step-btn') == null)
                console.error('Could not find step button');

            document.getElementById('add-step-btn').addEventListener('click', () => {
                const container = document.getElementById('steps-container');

                // Create a new DIV to hold this step's fields
                const stepDiv = document.createElement('div');
                stepDiv.classList.add('step-item');
                stepDiv.innerHTML = `
                    <label>Step ${stepIndex + 1}:</label>
                    <input type="text" name="Steps[${stepIndex}].Instruction"
                        placeholder="Describe this step" required' />
                    <button type="button" class="remove-step-btn">Remove Step</button
                `;
                container.appendChild(stepDiv);

                //Wire up the "remove button for the step"
                stepDiv.querySelector('.remove-step-btn').addEventListener('click', () => {
                    container.removeChild(stepDiv);
                    //reindexes steps for steps removed from the middle
                    document.getElementById('steps-container').addEventListener('click', function(e) {
                        if (e.target.classList.contains('remove-step-btn')) {
                            const toRemove = e.target.closest('.step-item');
                            toRemove.remove();
                            reindexSteps();
                        }
                    });
                });

                stepIndex++;
            });

            document.getElementById('add-ingredient-btn').addEventListener('click', () => {
                const container = document.getElementById('ingredients-container');

                const ingDiv = document.createElement('div');
                ingDiv.classList.add('ingredient-item');
                ingDiv.innerHTML = `
                    <label>Ingredient ${ingredientIndex + 1}:</label>
                    <input type="text" name="Ingredients[${ingredientIndex}].Name"
                        placeholder="Ingredient" required />
                    <input type="text" name="Ingredients[${ingredientIndex}].Quantity"
                        placeholder="Quantity (e.g. '2 cups')" />
                    <button type="button" class="remove-ingredients-btn">Remove</button>
                `;
                container.appendChild(ingDiv);

                ingDiv.querySelector('.remove-ingredient-btn').addEventListener('click', () => {
                    container.removeChild(ingDiv);
                    document.getElementById('ingredients-container').addEventListener('click', function(e) {
                        if (e.target.classList.contains('remove-ingredient-btn')) {
                            const toRemove = e.target.closest('.ingredient-item');
                            toRemove.remove();
                            reindexIngredients();
                        }
                    });
                });

                ingredientIndex++;
            });

            function reindexSteps() {
                const container = document.getElementById('steps-container');
                const items = container.querySelectorAll('.step-item');
                items.forEach((stepDiv, i) => {
                    //Update label
                    stepDiv.querySelector('label').innerText = `Step ${i + 1}:`;
                    //Update input name
                    const input = stepDiv.querySelector('input[type="text"]');
                    input.name = `Steps[${i}].Instruction`;
                });
                stepIndex = items.length;
            }

            function reindexIngredients() {
                const container = document.getElementById('ingredients-container');
                const items = container.querySelectorAll('.ingredient-item');
                items.forEach((ingDiv, i) => {
                    //Update label
                    ingDiv.querySelector('label').innerText = `Ingredient ${i + 1}:`;
                    //Update input
                    const input = ingDiv.querySelector('input[type="text"]');
                    input.Name = `Ingrediests[${i}].Ingredient.Name`;
                    input.Quantity = `Ingredients[${i}].Quantity`
                });
                ingredientIndex = items.length;
            }
        </script>
    }