@model Recipe
@{
    ViewData["Title"] = "Edit Recipe";
}

<h1>Edit Recipe</h1>

<form action="/Recipe/Edit" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="RecipeID" />

    <div class="container">
            <p>
                <label for="Name"><b>Name</b></label>
                <input type="text" value="@Model.Name" name="Name" required>
            </p>
            <p>
                <label for="PrepTimeMinutes"><b>Prep Time</b></label>
                <input type="number" value="@Model.PrepTimeMinutes" name="PrepTimeMinutes" required>
            </p>
            <p>
                <label for="CookTimeMinutes"><b>Cook Time</b></label>
                <input type="number" value="@Model.CookTimeMinutes" name="CookTimeMinutes" required>
            </p>

            <hr />

            <h3>Steps</h3>
            <div id="steps-container">
                @for (int i = 0; i < Model.Steps.Count; i++)
                {
                    <div class="step-item">
                        <label>Step @(i + 1):</label>
                        <input type="text"
                            name="Steps[@i].Instruction"
                            value="@Model.Steps.ElementAt(i).Instruction"
                            required />
                        <button type="button" class="remove-step-btn">Remove Step</button>
                    </div>
                }
            </div>
            <button type="button" id="add-step-btn">+ Add Step</button>

            <hr />

            <h3>Ingredients</h3>
            <div id="ingredients-container">
                @for (int i = 0; i < Model.Ingredients.Count; i++)
                {
                    <div class="ingredient-item">
                        <label>Ingredient @(i + 1):</label>
                        <input type="text"
                            name="Ingredients[@i].Name"
                            value="@Model.Ingredients.ElementAt(i).Ingredient.Name"
                            required />
                        <input type="text"
                            name="Ingredients[@i].Quantity"
                            value="@Model.Ingredients.ElementAt(i).Quantity"
                            required />
                        <button type="button" class="remove-ingredient-btn">Remove Ingredient</button>
                    </div>
                }
            </div>
            <button type="button" id="add-ingredient-btn">+ Add Ingredient</button>

            <button type="submit">Save Recipe</button>
            <a asp-action="MyRecipes">Cancel</a>
        </div>
</form>

    @section Scripts {

        <script>
            // Keep counters so fields are named Steps[0], Steps[1], etc.
            let stepIndex = @Model.Steps.Count;
            let ingredientIndex = @Model.Ingredients.Count;
            console.log("script running");

            const container = document.getElementById('steps-container');
            document.getElementById('add-step-btn').addEventListener('click', () => {

                // Create a new DIV to hold this step's fields
                console.log("button clicked");
                const stepDiv = document.createElement("div");
                stepDiv.classList.add("step-item");
                stepDiv.innerHTML = `
                    <label>Step ${stepIndex + 1}:</label>
                    <input type="text" name="Steps[${stepIndex}].Instruction"
                        placeholder="Describe this step" required' />
                    <button type="button" class="remove-step-btn">Remove Step</button
                `;
                container.appendChild(stepDiv);
                stepIndex++;

                });
                //Wire up the "remove button for the step"
                container.addEventListener('click', function (e) {
                    console.log("remove button clicked");
                    if (e.target && e.target.classList.contains('remove-step-btn')) {
                        const toRemove = e.target.closest('.step-item');
                        toRemove.remove();
                        reindexSteps();
                    }

                });

            const fullIngDiv = document.getElementById('ingredients-container');

            document.getElementById('add-ingredient-btn').addEventListener('click', () => {
                const container = document.getElementById('ingredients-container');

                const ingDiv = document.createElement('div');
                ingDiv.classList.add('ingredient-item');
                ingDiv.innerHTML = `
                    <label>Ingredient ${ingredientIndex + 1}:</label>
                    <input type="text" name="Ingredients[${ingredientIndex}].Name"
                        placeholder="Ingredient" required />
                    <input type="text" name="Ingredients[${ingredientIndex}].Quantity"
                        placeholder="Quantity (e.g. '2 cups')" />
                    <button type="button" class="remove-ingredient-btn">Remove Ingredient</button>
                `;
                container.appendChild(ingDiv);
                ingredientIndex++;
            });

                @* document.getElementsByClassName("remove-ingredient-btn").forEach(e => e.addEventListener('click', () => {
                    console.log("button clicked");
                }));  *@
                fullIngDiv.addEventListener('click', function (e) {
                    console.log("remove button clicked");
                    if (e.target && e.target.classList.contains('remove-ingredient-btn')) {
                        const toRemove = e.target.closest('.ingredient-item');
                        toRemove.remove();
                        reindexIngredients();
                    }

                });

            function reindexSteps() {
                const container = document.getElementById('steps-container');
                const items = container.querySelectorAll('.step-item');
                items.forEach((stepDiv, i) => {
                    //Update label
                    stepDiv.querySelector('label').innerText = `Step ${i + 1}:`;
                    //Update input name
                    const input = stepDiv.querySelector('input[type="text"]');
                    input.name = `Steps[${i}].Instruction`;
                });
                stepIndex = items.length;
            }

            function reindexIngredients() {
                const container = document.getElementById('ingredients-container');
                const items = container.querySelectorAll('.ingredient-item');
                items.forEach((ingDiv, i) => {
                    // Update the <label> text
                    const lbl = ingDiv.querySelector("label");
                    lbl.innerText = `Ingredient ${idx + 1}:`;

                    // Rename the Name input
                    const nameInput = ingDiv.querySelector("input[name^='RecipeIngredients'][name$='.Name']");
                    nameInput.name = `RecipeIngredients[${idx}].Name`;

                    // Rename the Quantity input
                    const qtyInput = ingDiv.querySelector("input[name^='RecipeIngredients'][name$='.Quantity']");
                    qtyInput.name = `RecipeIngredients[${idx}].Quantity`;
                });
                ingredientIndex = items.length;
            }
        </script>
    }